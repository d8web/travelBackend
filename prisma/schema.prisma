// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String @id @default(uuid())
    name     String
    username String @unique
    password String

    birthdate  DateTime?
    city       String?
    work       String?
    avatar     String?   @default("avatar.jpg")
    cover      String?   @default("cover.jpg")
    paid       Boolean?  @default(false) // Se pagou ou não
    usedTheMap Int?      @default(0) // Quantas vezes usou o mapa, passou de 5 solicitar pagamento

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    refreshToken RefreshToken?

    posts     Post[]
    likes     PostLikes[]
    relations UserRelations[]
    comments  PostComments[]
    favorites UserFavorites[]
    review    Review[]

    @@map("users")
}

model RefreshToken {
    id        String @id @default(uuid())
    expiresIn Int
    user      User   @relation(fields: [userId], references: [id])
    userId    String @unique

    @@map("refreshtoken")
}

model Attractives {
    id                  String   @id @default(uuid())
    idPark              String
    type                String?  @default("Cachoeira")
    name                String
    title               String
    description         String?
    price               Float
    latitude            String
    longitude           String
    location            String
    vehicleRecomended   Boolean
    polluted            Boolean? @default(false)
    guide               Boolean? @default(false)
    propertyPrivate     Boolean? @default(true)
    popularLocation     Boolean? @default(false)
    rate                Float?   @default(4)
    walkingLevel        String?  @default("Fácil/Médio")
    averageWalkingTime  String // Tempo médio de caminhada até o atrativo
    slipperyStones      Boolean? @default(true)
    distanceOfCarrancas String
    placeForChildren    Boolean? @default(true)
    averageDepth        String
    averageHeightOfFall String
    bestPhotos          Boolean? @default(true)
    observations        String?

    images  Image[]
    reviews Review[]
    parks   Park?    @relation(fields: [idPark], references: [id])

    @@map("attractives")
}

model UserRelations {
    id       String @id @default(uuid())
    userFrom String
    userTo   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userFrom], references: [id])

    @@map("userrelations")
}

model Post {
    id   String @id @default(uuid())
    type String
    body String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author   User   @relation(fields: [authorId], references: [id])
    authorId String @default(uuid())

    likes    PostLikes[]
    comments PostComments[]

    @@map("posts")
}

model PostLikes {
    id     String @id @default(uuid())
    idPost String
    idUser String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])
    post Post @relation(fields: [idPost], references: [id])

    @@map("postlikes")
}

model PostComments {
    id     String @id @default(uuid())
    idPost String
    idUser String
    body   String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])
    post Post @relation(fields: [idPost], references: [id])

    @@map("postcomments")
}

model Image {
    id           String   @id @default(uuid())
    idAttractive String
    cover        String?  @default("cover.jpg")
    url          String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attractive Attractives @relation(fields: [idAttractive], references: [id])

    @@map("images")
}

model UserFavorites {
    id           String @id @default(uuid())
    idUser       String
    idAttractive String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])

    @@map("userfavorites")
}

model Review {
    id           String  @id @default(uuid())
    idAttractive String
    idUser       String
    rate         Float
    body         String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user       User        @relation(fields: [idUser], references: [id])
    attractive Attractives @relation(fields: [idAttractive], references: [id])

    @@map("reviews")
}

model Park {
    id            String  @id @default(uuid())
    name          String
    image         String? @default("cover.jpg")
    price         Float
    phone         String?
    whatsapp      String?
    wifi          Boolean
    bath          Boolean
    restaurant    Boolean
    parking       Boolean
    private       Boolean
    hotel         Boolean
    mainWaterfall String?
    latitude      String
    longitude     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attractiveList Attractives[]

    @@map("parks")
}

model Agency {
    id               String  @id @default(uuid())
    name             String
    address          String?
    type             String? @default("agency")
    image            String? @default("cover.jpg")
    website          String?
    phone            String?
    whatsapp         String?
    facebook         String?
    instagram        String?
    otherSocialMedia String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tours Tour[]

    @@map("agency")
}

model Tour {
    id                    String   @id @default(uuid())
    idAgency              String
    attractives           String[]
    name                  String
    meansOfLocomotion     String
    guidesOnVehicleClient Boolean? @default(false)
    background            String?  @default("cover.jpg")
    video                 String?  @default("cover.jpg")
    groups                Boolean
    maxPeople             Int?
    minPeople             Int?     @default(0)
    pricePerPeople        Float
    specialPrice          Float?
    descriptionTour       String?
    whatsToTake           String?
    hasWalk               Boolean? @default(true)
    observations          String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    agency Agency @relation(fields: [idAgency], references: [id])

    @@map("tours")
}

model Accommodation {
    id                String   @id @default(uuid())
    type              String
    image             String?  @default("cover.jpg")
    phone             String?
    whatsapp          String?
    website           String?
    booking           String?
    bestaccommodation Boolean?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("accommodations")
}

model Conversation {
    id      String   @id @default(uuid())
    members String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]

    @@map("conversations")
}

model Message {
    id             String   @id @default(uuid())
    conversationId String
    sender         String
    text           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    conversation Conversation @relation(fields: [conversationId], references: [id])

    @@map("messages")
}

model Business {
    id               String  @id @default(uuid())
    name             String
    address          String?
    type             String
    image            String? @default("cover.jpg")
    website          String?
    phone            String?
    whatsapp         String?
    facebook         String?
    instagram        String?
    otherSocialMedia String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
