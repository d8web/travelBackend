generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(uuid())
    name     String
    type     String? @default("standard")
    email    String  @unique
    password String

    birthdate          DateTime?
    address            String?
    contactNumber      String?
    city               String?
    work               String?
    avatar             String?   @default("avatar.jpg")
    cover              String?   @default("cover.jpg")
    paid               Boolean?  @default(false) // Se pagou ou não
    tokenPaid          String?
    usedTheMap         Int?      @default(0) // Quantas vezes usou o mapa, passou de 5 solicitar pagamento
    status             Boolean   @default(false)
    whereAreYouStaying String? // Onde está hospedado, pousada, hotel, hostel, airbnb
    roomNumber         Int? // Number of room where you're staying
    deliveryNote       String?   @db.Text // Observação da entrega, ex: Vou estar esperando em tal lugar(opcional)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    refreshToken RefreshToken?

    posts              Post[]
    likes              PostLike[]
    relations          UserRelation[]
    comments           PostComment[]
    favorites          UserFavorite[]
    attractiveReviews  AttractiveReview[]
    appointments       UserAppointment[]
    ServiceReview      ServiceReview[]
    ServiceTestimonial ServiceTestimonial[]
    FoodFeedback       FoodFeedback[]
    Order              Order[]

    @@map("users")
}

model UserAppointment {
    id                  String @id @default(uuid())
    idUser              String // id user to appointment agency
    idAgency            String // ID agency
    idService           String // Id service
    numberOfPeoples     Int // Number of peoples
    appointmentDatetime String // Datetime from appointment to user from agency

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])

    @@map("user_appointments")
}

model RefreshToken {
    id        String @id @default(uuid())
    expiresIn Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    @@map("refresh_tokens")
}

model Attractives {
    id                  String   @id @default(uuid())
    idPark              String
    type                String?  @default("Cachoeira")
    name                String
    title               String
    description         String?  @db.Text
    cover               String?  @default("cover.jpg")
    latitude            String   @db.VarChar(50)
    longitude           String   @db.VarChar(50)
    vehicleRecomended   Boolean? @default(false) // Vehicle normal or offRoad
    polluted            Boolean? @default(false)
    guide               Boolean? @default(false)
    propertyPrivate     Boolean? @default(true)
    popularLocation     Boolean? @default(false)
    walkingLevel        String?  @default("Fácil/Médio") @db.VarChar(100)
    averageWalkingTime  String?  @default("Entre 5 a 10 minutos") // Tempo médio de caminhada até o atrativo
    slipperyStones      Boolean? @default(true)
    distanceOfCarrancas String   @db.VarChar(50)
    placeForChildren    Boolean? @default(true)
    averageDepth        String   @db.VarChar(100)
    averageHeightOfFall String   @db.VarChar(100)
    bestPhotos          Boolean? @default(true)
    observations        String?  @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    images            ImagesAttractive[]
    attractiveReviews AttractiveReview[]
    parks             Park?              @relation(fields: [idPark], references: [id])

    @@map("attractives")
}

model ImagesAttractive {
    id           String   @id @default(uuid())
    idAttractive String
    images       String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attractive Attractives @relation(fields: [idAttractive], references: [id])

    @@map("images_attractives")
}

model UserRelation {
    id       String @id @default(uuid())
    userFrom String
    userTo   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userFrom], references: [id])

    @@map("user_relations")
}

model Post {
    id   String @id @default(uuid())
    type String @db.VarChar(20)
    body String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    likes    PostLike[]
    comments PostComment[]

    @@map("posts")
}

model PostLike {
    id     String @id @default(uuid())
    idPost String
    idUser String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])
    post Post @relation(fields: [idPost], references: [id])

    @@map("post_likes")
}

model PostComment {
    id     String @id @default(uuid())
    idPost String
    idUser String
    body   String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])
    post Post @relation(fields: [idPost], references: [id])

    @@map("post_comments")
}

model UserFavorite {
    id           String @id @default(uuid())
    idUser       String
    idAttractive String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [idUser], references: [id])

    @@map("user_favorites")
}

model AttractiveReview {
    id           String  @id @default(uuid())
    idAttractive String
    idUser       String
    rate         Float
    body         String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user       User        @relation(fields: [idUser], references: [id])
    attractive Attractives @relation(fields: [idAttractive], references: [id])

    @@map("attractive_reviews")
}

model Park {
    id                String   @id @default(uuid())
    name              String
    image             String?  @default("cover.jpg")
    price             Float
    phone             String?  @db.VarChar(50)
    whatsapp          String?  @db.VarChar(50)
    wifi              Boolean? @default(false)
    bath              Boolean? @default(false)
    restaurant        Boolean? @default(false)
    parking           Boolean? @default(true)
    private           Boolean? @default(true)
    hotel             Boolean? @default(false)
    mainWaterfall     String?
    latitude          String   @db.VarChar(50)
    longitude         String   @db.VarChar(50)
    facebook          String?
    instagram         String?
    othersSocialMedia String[] @default([])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attractiveList Attractives[]
    images         ImagePark[]

    @@map("parks")
}

model ImagePark {
    id     String   @id @default(uuid())
    idPark String
    images String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    park Park @relation(fields: [idPark], references: [id])

    @@map("images_parks")
}

model Agency {
    id                String   @id @default(uuid())
    name              String
    address           String?
    type              String?  @default("agency")
    image             String?  @default("cover.jpg")
    website           String?
    phone             String?  @db.VarChar(50)
    whatsapp          String?  @db.VarChar(50)
    facebook          String?
    instagram         String?
    othersSocialMedia String[] @default([])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tours               Tour[]
    imagesAgency        ImageAgency[]
    services            Service[]
    ServiceAvailability ServiceAvailability[]
    ServiceReviews      ServiceReview[]
    ServiceTestimonials ServiceTestimonial[]

    @@map("agencies")
}

model Service {
    id       String   @id @default(uuid())
    idAgency String // Idenfifier agency
    name     String // Name service of agency
    price    Float // Agency Pricing Service
    tours    String[] // Tours included that service
    duration String   @db.VarChar(50)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    agency              Agency                @relation(fields: [idAgency], references: [id])
    availability        ServiceAvailability[]
    ServiceReviews      ServiceReview[]
    ServiceTestimonials ServiceTestimonial[]

    @@map("services")
}

model ServiceAvailability {
    id       String  @id @default(uuid())
    idAgency String?

    weekday           Int // Day week of job the service
    numberOfVacancies Int // Number of vacancies ex 10, if two peoples reserved some more 8 vacancies
    hours             String @db.Text // Hours of days of job the service
    maxPeople         Int?
    minPeople         Int?   @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    agency     Agency?  @relation(fields: [idAgency], references: [id])
    Services   Service? @relation(fields: [servicesId], references: [id])
    servicesId String?

    @@map("service_availability")
}

model ServiceReview {
    id        String @id @default(uuid())
    idService String
    idAgency  String // Idenfifier service
    idUser    String
    rate      Float // Note from service

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [idUser], references: [id])
    service Service @relation(fields: [idService], references: [id])
    agency  Agency  @relation(fields: [idAgency], references: [id])

    @@map("service_reviews")
}

model ServiceTestimonial {
    id        String @id @default(uuid())
    idAgency  String // Idenfifier agency
    idService String
    idUser    String
    rate      Float // Note drom service
    body      String // The Body testimonial

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [idUser], references: [id])
    agency  Agency  @relation(fields: [idAgency], references: [id])
    service Service @relation(fields: [idService], references: [id])

    @@map("service_testimonials")
}

model ImageAgency {
    id       String   @id @default(uuid())
    idAgency String
    images   String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    agency Agency @relation(fields: [idAgency], references: [id])

    @@map("images_agencies")
}

model Tour {
    id                    String   @id @default(uuid())
    idAgency              String
    vehicle               String?
    attractives           String[]
    name                  String
    meansOfLocomotion     String
    guidesOnVehicleClient Boolean? @default(false)
    background            String?  @default("cover.jpg")
    video                 String?  @default("cover.jpg")
    groups                Boolean
    pricePerPeople        Float
    duration              String?  @db.VarChar(20)
    specialPrice          Float?
    descriptionTour       String?  @db.Text
    whatsToTake           String?  @db.Text
    hasWalk               Boolean? @default(true)
    observations          String?  @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    agency Agency       @relation(fields: [idAgency], references: [id])
    images ImagesTour[]

    @@map("tours")
}

model ImagesTour {
    id     String   @id @default(uuid())
    idTour String
    images String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tour Tour @relation(fields: [idTour], references: [id])

    @@map("images_tours")
}

model Accommodation {
    id                String   @id @default(uuid())
    type              String
    image             String?  @default("cover.jpg")
    phone             String?
    whatsapp          String?
    acceptPets        Boolean? @default(false)
    website           String?
    facebook          String?
    instagram         String?
    booking           String?
    othersSocialMedia String[] @default([])
    bestaccommodation Boolean?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageAccommodation ImageAccommodation[]

    @@map("accommodations")
}

model ImageAccommodation {
    id              String   @id @default(uuid())
    idAccommodation String
    images          String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    acommodation Accommodation @relation(fields: [idAccommodation], references: [id])

    @@map("images_accommodations")
}

model Conversation {
    id      String   @id @default(uuid())
    members String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]

    @@map("conversations")
}

model Message {
    id             String @id @default(uuid())
    conversationId String
    sender         String
    text           String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    conversation Conversation @relation(fields: [conversationId], references: [id])

    @@map("messages")
}

model Business {
    id                String   @id @default(uuid())
    name              String
    type              String
    address           String?
    image             String?  @default("cover.jpg")
    website           String?
    phone             String?
    whatsapp          String?
    facebook          String?
    instagram         String?
    othersSocialMedia String[] @default([])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageBusiness ImageBusiness[]

    @@map("business")
}

model ImageBusiness {
    id         String   @id @default(uuid())
    idBusiness String
    images     String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    business Business @relation(fields: [idBusiness], references: [id])

    @@map("images_business")
}

// Reference DB https://www.inettutor.com/diagrams/restaurant-food-delivery-system-free-database-design-tutorial/
model Food {
    id                 String   @id @default(uuid())
    type               String   @db.VarChar(50) // Restaurant, bakery, pizza or burger
    typeFood           String[] @default(["all"]) // Vegan, all, mineira, vegetarian
    name               String
    ownerName          String // The name of the restaurant’s owner, [Nome do dono]
    image              String?  @default("cover.jpg") // logo from restaurant
    businessPermit     String? // Alvará da prefeitura
    number             String   @db.VarChar(15)
    phone              String?  @db.VarChar(50)
    whatsapp           String?  @db.VarChar(50)
    hourOpen           String?  @db.VarChar(10)
    hourClosed         String?  @db.VarChar(10)
    delivery           Boolean? @default(true) // Has delivery
    website            String?
    facebook           String?
    instagram          String?
    othersSocialMedia  String[] @default([])
    acceptReservation  Boolean? @default(false) // Accept reservation [Aceita reserva]
    acceptOrders       Boolean? @default(false) // Accept orders [Aceita encomendas]
    reference          String?
    mainCourse         String? // [Prato principal]
    driversRate        Float // O valor da taxa do motorista
    latitude           String?  @db.VarChar(100)
    longitude          String?  @db.VarChar(100)
    acceptPets         Boolean? @default(false)
    bestFood           Boolean? @default(false)
    registrationStatus String?  @default("pendente") @db.VarChar(100) // pending, approved, disapproved
    observations       String?  @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ImagesFood    ImageFood[]
    FoodFeedbacks FoodFeedback[]
    Orders        Order[]
    AdminFood     AdminFood[]
    FoodList      FoodList[]

    @@map("foods")
}

model FoodList {
    id              String   @id @default(uuid())
    foodId          String?
    foodName        String
    deliveryTime    String // Tempo de duração de preparo
    pricePerServing Float
    image           String   @default("cover.jpg")
    description     String   @db.Text
    status          Boolean? @default(true)

    Order Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Food      Food?    @relation(fields: [foodId], references: [id])

    @@map("food_list")
}

model DeliveryDriver {
    id             String  @id @default(uuid())
    restaurantId   String
    nameCompleted  String
    address        String
    contactNumber  String  @db.VarChar(50)
    email          String
    profilePicture String? @default("cover.jpg")
    driversLicense String
    username       String
    password       String
    accountStatus  Boolean // Active, inactive

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order[]

    @@map("delivery_drivers")
}

model FoodFeedback {
    id          String   @id @default(uuid())
    title       String
    description String   @db.Text
    date        DateTime @default(now())
    customerId  String
    foodId      String
    status      Int?     @default(1) // 2 = fechado, 1 = aberto, 3 = resolvido

    food Food @relation(fields: [foodId], references: [id])
    user User @relation(fields: [customerId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("food_feedbacks")
}

model Order {
    id             String   @id @default(uuid())
    orderCode      String // Código único para o pedido
    customerId     String // Esta é uma chave estrangeira que aponta para o cliente
    orderDateTime  DateTime // A data e hora em que o pedido foi feito
    foodId         String // Esta é uma chave estrangeira que aponta para o alimento
    restaurantId   String // Esta é uma chave estrangeira que aponta para o restaurante
    amount         Float // O valor a ser pago pelo pedido
    deliveryCharge Float // O valor da taxa de entrega
    totalAmount    Float // O valor total do pedido
    driverId       String? // Esta é uma chave estrangeira que aponta para o motorista de entrega
    status         Int?     @default(1) // pendente, cancelado, entregue
    processedBy    Int // O usuário ou administrador que processou a transação

    driver     DeliveryDriver? @relation(fields: [deliveryDriverId], references: [id])
    user       User            @relation(fields: [customerId], references: [id])
    restaurant Food            @relation(fields: [restaurantId], references: [id])
    food       FoodList        @relation(fields: [foodId], references: [id])

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    deliveryDriverId String?

    @@map("orders")
}

model AdminFood {
    id              String @id @default(uuid())
    completeName    String
    emailAddress    String
    completeAddress String
    username        String
    password        String
    status          Int    @default(1)
    idFood          String

    food Food @relation(fields: [idFood], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("admin_food")
}

model ImageFood {
    id     String   @id @default(uuid())
    idFood String
    images String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    food Food @relation(fields: [idFood], references: [id])

    @@map("image_foods")
}
